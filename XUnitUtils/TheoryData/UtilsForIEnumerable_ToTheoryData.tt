<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// AUTO-GENERATED FILE
// DO NOT MODIFY

using Xunit;


namespace XUnitUtils.TheoryData
{
	public static partial class UtilsForIEnumerable
	{
<#
for (int numOfArgs = 2; numOfArgs <= MaxTypeArgs; numOfArgs++)
{
	string typeArgList = GetArgList(numOfArgs, "T");
#>


		/// <summary>
		/// Converts a collection of tuples to an instance of <see cref="TheoryData{<#=typeArgList#>}"/>.
		/// </summary>
		/// <inheritdoc cref="TheoryData{<#=typeArgList#>}" path="//typeparam"/>
		/// <param name="collection">The collection to convert.</param>
		/// <returns>The converted collection.</returns>
		public static TheoryData<<#=typeArgList#>> ToTheoryData<<#=typeArgList#>>(IEnumerable<(<#=typeArgList#>)> collection)
		{
			TheoryData<<#=typeArgList#>> theoryData = new();
			foreach ((<#=GetArgList(numOfArgs, "var v")#>) in collection)
				theoryData.Add(<#=GetArgList(numOfArgs, "v")#>);
			return theoryData;
		}

<#
}
#>
	}
}
<#+
public int MaxTypeArgs => 10;

public string GetArgList(int numOfArgs, string prefix) =>
	string.Join
	(
		", ",
		from formalTypeArgIndex in Enumerable.Range(1, numOfArgs)
			select $"{prefix}{formalTypeArgIndex}"
	)
;
#>